{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Dark",
	"scopeName": "source.dark",
	"patterns": [
		{ "include": "#comments" },      
		{ "include": "#strings" },        
		{ "include": "#keywords" },       
		{ "include": "#operators" },      
		{ "include": "#entities" },       
		{ "include": "#constants" },
		{ "include": "#punctuation" }
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign.dark",
					"match": "#.*"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.multi.dark",
					"begin": "\"\"\"",
					"end": "\"\"\"",
					"patterns": [
						{
							"name": "constant.character.escape.dark",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.multi.dark",
					"begin": "'''",
					"end": "'''",
					"patterns": [
						{
							"name": "constant.character.escape.dark",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.double.dark",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.dark",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.dark",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.dark",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.flow.dark",
					"match": "\\b(if|then|else|while|for|in|return|try|except|do|end)\\b"
				},
				{
					"name": "keyword.control.import.dark",
					"match": "\\b(import)\\b"
				},
				{
					"name": "keyword.operator.logical.dark",
					"match": "\\b(and|or|not)\\b"
				},
				{
					"name": "storage.type.dark",
					"match": "\\b(function|class)\\b"
				}
			]
		},
		"entities": {
			"patterns": [
				{
					"name": "support.function.builtin.dark",
					"match": "\\b(print|println|input|to_int|to_str|to_float|type|len|find)\\b"
				},
				{
					"comment": "Class definition: class ClassName(Parent) do",
					"begin": "(?<=^|\\s)(class)\\s+([a-zA-Z_]\\w*)",
					"beginCaptures": {
						"1": { "name": "storage.type.class.dark" },
						"2": { "name": "entity.name.type.class.dark" }
					},
					"end": "(do)|(?=\\s*#)|$",
					"endCaptures": {
						"1": { "name": "keyword.control.flow.dark" }
					},
					"patterns": [
						{
							"comment": "Parent class",
							"begin": "\\(",
							"beginCaptures": { "0": { "name": "punctuation.definition.parameters.begin.dark" } },
							"end": "\\)",
							"endCaptures": { "0": { "name": "punctuation.definition.parameters.end.dark" } },
							"patterns": [
								{
									"name": "entity.other.inherited-class.dark",
									"match": "[a-zA-Z_]\\w*"
								}
							]
						}
					]
				},
				{
					"comment": "Function definition: function funcName(params) do",
					"begin": "(?<=^|\\s)(function)\\s+([a-zA-Z_]\\w*)",
					"beginCaptures": {
						"1": { "name": "storage.type.function.dark" },
						"2": { "name": "entity.name.function.dark" }
					},
					"end": "(do)|(?=\\s*#)|$",
					"endCaptures": {
						"1": { "name": "keyword.control.flow.dark" }
					},
					"patterns": [
						{
							"comment": "Function parameters",
							"begin": "\\(",
							"beginCaptures": { "0": { "name": "punctuation.definition.parameters.begin.dark" } },
							"end": "\\)",
							"endCaptures": { "0": { "name": "punctuation.definition.parameters.end.dark" } },
							"patterns": [
								{
									"name": "variable.parameter.dark",
									"match": "[a-zA-Z_]\\w*"
								},
								{
									"name": "punctuation.separator.dark",
									"match": ","
								}
							]
						}
					]
				},
				{
					"comment": "Python exec block with embedded Python syntax",
					"begin": "(?i)\\b(python)\\s*(\\.)\\s*(exec)\\s*\\(",
					"beginCaptures": {
						"1": { "name": "variable.other.object.dark" },
						"2": { "name": "punctuation.accessor.dark" },
						"3": { "name": "entity.name.function.method.dark" }
					},
					"end": "\\)",
					"endCaptures": {
						"0": { "name": "punctuation.definition.parameters.end.dark" }
					},
					"patterns": [
						{
							"comment": "Single-quoted string with Python inside",
							"begin": "'",
							"end": "'",
							"name": "string.quoted.single.python.embedded.dark",
							"patterns": [
								{
									"name": "constant.character.escape.dark",
									"match": "\\\\."
								},
								{ "include": "source.python" }
							]
						},
						{
							"comment": "Double-quoted string with Python inside",
							"begin": "\"",
							"end": "\"",
							"name": "string.quoted.double.python.embedded.dark",
							"patterns": [
								{
									"name": "constant.character.escape.dark",
									"match": "\\\\."
								},
								{ "include": "source.python" }
							]
						}
					]
				},
				{
					"comment": "Handles object.method() calls",
					"match": "([a-zA-Z_]\\w*)\\s*(\\.)\\s*([a-zA-Z_]\\w*)\\s*(?=\\()",
					"captures": {
						"1": { "name": "variable.other.object.dark" },
						"2": { "name": "punctuation.accessor.dark" },
						"3": { "name": "entity.name.function.method.dark" }
					}
				},
				{
					"comment": "Handles regular function() calls",
					"name": "entity.name.function.dark",
					"match": "\\b([a-zA-Z_]\\w*)\\s*(?=\\()"
				},
				{
					"comment": "Handles standalone variables that are not part of a call or access",
					"name": "variable.other.dark",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*[\\.\\(])"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.dark",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.numeric.dark",
					"match": "\\b(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.comparison.dark",
					"match": "==|!=|<=|>=|<|>"
				},
				{
					"name": "keyword.operator.assignment.dark",
					"match": "="
				},
				{
					"name": "keyword.operator.arithmetic.dark",
					"match": "[\\+\\-\\*/]"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.terminator.statement.dark",
					"match": ";"
				},
				{
					"name": "punctuation.separator.dark",
					"match": ","
				},
				{
					"name": "punctuation.accessor.dark",
					"match": "\\."
				}
			]
		}
	}
}